"""
Django settings for encorea project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

# todo: scrollable tab1 table for overflowing contents

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cf+a=)h^z80#jg&$@z=4*up8nci+gz14@@c9ncl+j4dqonblou'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # False

SWARM = False # True

if SWARM:
    ALLOWED_HOSTS = ['172.31.12.20']  #['54.183.245.123']
else:
    ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

if not SWARM:
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'page_footer',
        'page_header',
        'page_main',
        'page_parts',
        'page_contact',
        'page_map',
        'corsheaders',
    ]
else:
        INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'page_footer',
        'page_header',
        'page_main',
        'page_parts',
        'page_contact',
        'page_map',
    ]

if not SWARM:
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'corsheaders.middleware.CorsMiddleware',
    ]
else:
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]
    
ROOT_URLCONF = 'encorea.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'encorea.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')


# should log rotate
# https://support.rackspace.com/how-to/understanding-logrotate-utility/

#LOGGING = {
    #'version': 1,
    #'disable_existing_loggers': False,
    #'handlers': {
        #'file': {
            #'level': 'DEBUG',
            #'class': 'logging.FileHandler',
            #'filename': BASE_DIR + 'js.log',
        #},
    #},
    #'loggers': {
        #'jslogger': {
            #'handlers': ['file'],
            #'level': 'DEBUG',
            #'propagate': True,
        #},
    #},
#}

if SWARM == False:

    LOGGING = {                                                                     
        'version': 1,                                                               
        'disable_existing_loggers': False,                                          
        'handlers': {                                                               
            'console': {                                                            
                'class': 'logging.StreamHandler',                                   
            },                   
            'mail_admins': {
                'class': 'django.utils.log.AdminEmailHandler',
            },
        },                                                                          
        'loggers': {                                                                
            'jslogger': {                                                           
                'handlers': ['console',],                                            
                'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),                     
                'propagate': True,                                                  
            },                                                                      
            'django': {                                                             
                'handlers': ['console',],                                            
                'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),                     
                'propagate': True,                                                  
            },                                                                      
        },                                                                          
    }       
    

else:
    LOGGING = {                                                                     
        'version': 1,                                                               
        'disable_existing_loggers': False,                                          
        'handlers': {                                                               
            'console': {                                                            
                'class': 'logging.StreamHandler',                                   
            },                   
            'mail_admins': {
                'class': 'django.utils.log.AdminEmailHandler',
            },
        },                                                                          
        'loggers': {                                                                
            'jslogger': {                                                           
                'handlers': ['console', 'mail_admins',],                                            
                'level': os.getenv('DJANGO_LOG_LEVEL', 'WARN'),                     
                'propagate': True,                                                  
            },                                                                      
            'django': {                                                             
                'handlers': ['console', 'mail_admins',],                                            
                'level': os.getenv('DJANGO_LOG_LEVEL', 'WARN'),                     
                'propagate': True,                                                  
            },                                                                      
        },                                                                          
    }       


ADMINS = [('Brandon', 'btardio.logger@gmail.com')]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = 'smtp.gmail.com'

EMAIL_PORT = 587

EMAIL_HOST_USER = 'btardio.logger@gmail.com'

EMAIL_HOST_PASSWORD = 'happy69^('

EMAIL_USE_TLS = True




if SWARM:
    SOLR_SERVERS = ['172.31.12.20:8983'] # ['13.57.209.107:8983',] #['54.183.245.123:8983',]
else:
    SOLR_SERVERS = ['127.0.0.1:8983',]




EMAIL_RECIPIENTS = ['taryntardio@gmail.com', 'btardio@gmail.com']


if not SWARM:
    CORS_ORIGIN_ALLOW_ALL = True



## Deployment Notes:


# Note for deployment in Docker Swarm: make sure worker nodes of swarm can access the solr server 




